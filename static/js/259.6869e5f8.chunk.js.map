{"version":3,"file":"static/js/259.6869e5f8.chunk.js","mappings":"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","sources":["redux/selectors.js","components/Form/form.jsx","components/Contacts/contacts.jsx","components/Filter/filter.jsx","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.phonebook.contacts.items;\nexport const getIsLoading = state => state.phonebook.contacts.isLoading;\nexport const getError = state => state.phonebook.contacts.error;\nexport const getСontactsFilter = state => state.phonebook.contactsFilter;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { resetFilterContacts } from 'redux/slice';\n\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  // Викликається під час відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(resetFilterContacts());\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    )\n      if (contacts.find(contact => contact.name === name)) {\n        alert(`${name} is already in contacts`);\n        return;\n      }\n    if (contacts.find(contact => contact.number === number)) {\n      alert(`Number ${number} already exists`);\n      return;\n    } else {\n      dispatch(addContact({ name, number }));\n      setName('');\n      setNumber('');\n    }\n  };\n  //Очистка форми\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <label className=\"form-label\">\n          Name\n          <input\n            className=\"form-input\"\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleInputChange}\n          />\n        </label>\n        <label className=\"form-label\">\n          Number\n          <input\n            className=\"form-input\"\n            placeholder=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleInputChange}\n          />\n        </label>\n        <button className=\"form-button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { useEffect } from 'react';\n\nimport { fetchContacts, deleteContact } from 'redux/operations';\n\nimport { getContacts, getСontactsFilter } from '../../redux/selectors';\n\nimport { resetFilterContacts } from 'redux/slice';\nimport { TbTrashXFilled, TbUser } from 'react-icons/tb';\n\nfunction ContactList() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filterContactArray = useSelector(getСontactsFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = e => {\n    dispatch(resetFilterContacts());\n    dispatch(deleteContact(e.target.dataset.id));\n  };\n\n  const resultArray =\n    filterContactArray.length > 0 ? filterContactArray : contacts;\n\n  return (\n    <ul className=\"contact\">\n      {resultArray.map(({ id, name, number }) => (\n        <li className=\"contact-item\" key={id}>\n          <TbUser size={20} color=\"black\" />\n          <span>{` ${name}: ${number}`}</span>\n          <button\n            data-id={id}\n            className=\"contact-button \"\n            type=\"button\"\n            onClick={handleDeleteContact}\n          >\n            <TbTrashXFilled size={15} color=\"red\" />\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter, filterContacts, resetFilterContacts } from 'redux/slice';\n\nimport { getContacts } from 'redux/selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleFilterChange = e => {\n    dispatch(resetFilterContacts());\n    const { value: filterContact } = e.target;\n    dispatch(updateFilter(filterContact.toUpperCase()));\n    dispatch(filterContacts(contacts));\n  };\n  return (\n    <label className=\"filter\">\n      Find contacts by name\n      <input\n        className=\"filter-input\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import Form from 'components/Form/form';\nimport ContactList from 'components/Contacts/contacts';\nimport Filter from 'components/Filter/filter';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getError, getIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  return (\n    <div className=\"main-contacts\">\n      <h1 className=\"form-text\">Phonebook</h1>\n      <Form />\n      <h2 className=\"form-text\">Contacts</h2>\n      <Filter />\n      {isLoading && !error && <h3>Request in progress...</h3>}\n      {!isLoading && error && <h3>Error...{error}</h3>}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["getContacts","state","phonebook","contacts","items","getIsLoading","isLoading","getError","error","getСontactsFilter","contactsFilter","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","e","currentTarget","value","className","onSubmit","preventDefault","resetFilterContacts","find","contact","toLowerCase","alert","addContact","placeholder","type","pattern","title","required","onChange","filterContactArray","useEffect","fetchContacts","handleDeleteContact","deleteContact","target","dataset","id","resultArray","length","map","size","color","onClick","filterContact","updateFilter","toUpperCase","filterContacts","Contacts"],"sourceRoot":""}